$#include "OptionModule.h"
$#include "VisionModule.h"
$#include <singleton.h>
$#include "defence/EnemySituation.h"
$#include "WorldModel.h"

class CWorldModel{
	CWorldModel();
	const CVisionModule* vision();
	int OurRobotNum();
	int GetRealNum(int);
	int GetTacticNum(int);
	bool KickDirArrived(int, double, double, int );
	bool IsBallKicked(int);
	void SPlayFSMSwitchClearAll(bool clear_flag = false);
	bool IsBestPlayerChanged();
	bool CanDefenceExit();
	bool NeedExitAttackDef(CGeoPoint leftUp, CGeoPoint rightDown, int mode);
	bool ball2MarkingTouch(CGeoPoint leftUp, CGeoPoint rightDown);
	bool isMarkingFrontValid(CGeoPoint, double);
	int getEnemyKickOffNum();
	int getMarkingTouchArea(CGeoPoint leftPos1,CGeoPoint leftPos2,CGeoPoint rightPos1,CGeoPoint rightPos2);
	bool checkEnemyKickOffNumChanged();
	string CurrentBayes();
	const bool canProtectBall(int current_cycle, int myNum = 0);
	const bool canShootOnBallPos(int current_cycle, int myNum = 0);
	const bool canPassOnBallPos(int current_cycle,CGeoPoint& passPos,CGeoPoint& guisePos, int myNum = 0);
	const bool canKickAtEnemy(int current_cycle, CGeoPoint& kickDir,int myNum = 0,int priority=0);
	const string getBallStatus(int current_cycle,int meNum=0);
	const int getAttackerAmount(int current_cycle,int meNum=0);
	const string getAttackDecision(int current_cycle,int meNum = 0);
	const bool generateTwoPassPoint(CGeoPoint& passOne,CGeoPoint& passTwo);
	const double getTandemDir(int myNum = 0);
	const CGeoPoint getTandemPos(int myNum = 0);
	const int getBallToucher();
	const int getLastBallToucher();
	const CGeoLine getBallChipLine();
	const bool IsOurBallByAutoReferee();
	void clearBallStateCouter();
	int getSuitSider();
	void setBallHandler(int num=0);
	bool isRecordRunPos();
	bool isBeingMarked(int myNum);
	bool isPassLineBlocked(int myNum, double allowance = 4.0);
	bool isShootLineBlocked(int myNum, double range = 150, double allowance = 3.0);
	bool isShootLineBlockedFromPoint(CGeoPoint pos, double range = 150);
	void drawReflect(int myNum);
	const CGeoPoint getLeftReflectPos(int myNum);
	const CGeoPoint getRightReflectPos(int myNum);
	const CGeoPoint getReflectPos(int myNum);
	const CGeoPoint getReflectTouchPos(int myNum, double y);
}
