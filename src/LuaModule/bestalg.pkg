$#include <fstream>
$#include <MultiThread.h>
$#include <singleton.h>
$#include "VisionModule.h"
$#include "geometry.h"
$#include "gpuBestAlgThread.h"

enum {
	CIRCLE_MODE = 0,
	RECT_MODE,
};


class CGPUBestAlgThread {
	CGPUBestAlgThread();
	~CGPUBestAlgThread();
	void initialize(CVisionModule* _pVision);
	CGeoPoint getBestPoint(const CGeoPoint leftUp = CGeoPoint(300,-200),const CGeoPoint rightDown = CGeoPoint(0,200), const int pointKeeperNum = 0, const ReCalModeT& reCalMode = RECT_MODE, bool forceReset = false);
	void generatePointValue();
	bool isLastOneValid(const CGeoPoint& p);
	void setSendPoint(const CGeoPoint passPoint);
	double getPosPotential(const CGeoPoint p);
	CGeoPoint bestPointForCornerKicks(bool isChip);
	CGeoPoint bestPointForFrontKicks();
	CGeoPoint bestPointForBackKicks();
	bool isChip();
	bool isChip(const int robotnum);
	bool isChip(const CGeoPoint passPoint);
	int getChipPower();
	int getFixBuf();
	void numberReceive(int first, int second, int third, int fourth, int assister, int goalie);
	void receiveOwnPos(vector <CGeoPoint> myPos, int number);
	void detectModule(bool generatePos,double detectDist,int detectCycle, bool useGoalie);
	void detectDefendKickedModule(int checkAttepmts, int defendKickCycle);
	void scanModule();
	void fakePosComputeModule();
	CGeoPoint getPosForFirstVehicle();
	CGeoPoint getPosForSecondVehicle();
	CGeoPoint getPosForThirdVehicle();
	CGeoPoint getPosForFourthVehicle();
	CGeoPoint getPosForAssister();
	CGeoPoint getPosForGoalie();
	CGeoPoint getPosForShoot();
	CGeoPoint generateJamPos();
	bool detectMarkedOver();
	bool detectDefendKickedOver();
	bool detectAgain();
	bool scanOver();
	bool canPass();
	bool isDefendedHead();
	bool allMarked();
	bool isMarked(int number);
	void changeLeaderOver(bool finishFlag);
	CGeoPoint confirmPosForFirstVehicle();
	CGeoPoint confirmPosForSecondVehicle();
	CGeoPoint confirmPosForThirdVehicle();
	CGeoPoint confirmPosForFourthVehicle();
	bool changeLeader();
};
